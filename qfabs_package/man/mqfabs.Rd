% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mqfabs.r
\name{mqfabs}
\alias{mqfabs}
\title{A minorization-maximization forward and backward stagewise algorithm for high-dimensional integrative quantile regression.}
\usage{
    mqfabs(y, x, n, tau = 0.5, Lambda2 = NULL, nlambda2 = 50, Lambda2_thre = 1e-3, epsilon = 0.01, 
           delta = 1e-8, xi = 1e-10, max.iter = 5000, gamma = 1)
}
\arguments{
    \item{y}{The response for \eqn{M} datasets, a numeric vector.}
    \item{x}{The design matrix for \eqn{M} datasets.}
    \item{n}{The sample sizes in multiple datasets. An integer vector in \eqn{R^{M}}, where \eqn{M} is the number of datasets.}
    \item{tau}{The quantile to be estimated, this is a number strictly between 0 and 1. Default value is 0.5.}
    \item{Lambda2}{The value of the contrast penalty parameter(s) that determine how much shrinkage in different regression coefficients is done. This should be either a scalar, or a vector. If not specified then a sequence will be automatically generated based on the data.}
    \item{nlambda2}{The number of lambda2s generated. This is ignored if lambda is set manually. Default is 50.}
    \item{Lambda2_thre}{Smallest value for lambda2, as a fraction of lambda2.max. Default is 1e-3.}
    \item{epsilon}{The step size for updating coefficients. Default is 0.01.}
    \item{delta}{A constant in pertubed loss function. Default is 1e-8.}
    \item{xi}{The threshold for mqfabs. Default is 1e-10.}
    \item{max.iter}{The maximum number of outer-loop iterations allowed. Default is 5000.}
    \item{gamma}{A tuning parameter in EBIC. Default is 1.}
}
\value{
A list.
\itemize{
    \item beta - The optimal solution that minimizes EBIC.
    \item lambda1 - lambda1 sequence generated by mqfabs.
    \item Lambda2 - Lambda2 sequence.
    \item lambda2 - lambda2 returned that minimizes the EBIC across the Lambda2 sequence.
    \item iter - Iterations.
    \item EBIC - The EBIC for each solution.
    \item opt - Position of the optimal lambda1 based on EBIC for lambda2.
}
}
\examples{
data(simulatedData_gaussian)
y = data_gaussian$y
x = data_gaussian$x
n = data_gaussian$n
fit <- mqfabs(y, x, n)

data(simulatedData_t3)
y = data_t3$y
x = data_t3$x
n = data_t3$n
fit <- mqfabs(y, x, n)

data(simulatedData_cauchy)
y = data_cauchy$y
x = data_cauchy$x
n = data_cauchy$n
fit <- mqfabs(y, x, n)

data(simulatedData_logistic)
y = data_logistic$y
x = data_logistic$x
n = data_logistic$n
fit <- mqfabs(y, x, n)
}
