writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("jsonlite", type = "source")
install.packages("jsonlite", type = "source")
numeric(10)
install.packages("socp")
install.packages("CLSOCP")
install.packages("SOCP")
install.packages("CLSOCP")
install.packages("C:/Users/panpan ren/Downloads/CLSOCP_1.0.tar.gz", repos = NULL, type = "source")
library(CLSOCP)
?socp
library(readxl)
data_hebei <- read_excel("D:/First/quantile/integrative analysis/simulation/data_hebei.xlsx")
View(data_hebei)
data_hebei[,192]
library(readxl)
data = read_excel("D:/Fourth/wast/CHARLS/data2.xls")
View(data)
data_zhejiang = data[which(data2[,13]=='浙江省'),]
data_zhejiang = data[which(data[,13]=='浙江省'),]
View(data_zhejiang)
data_zhejiang2013 = data_zhejiang[seq(1,nrow(data_zhejiang),2),]
data_zhejiang2015 = data_zhejiang[seq(2,nrow(data_zhejiang),2),]
View(data_zhejiang2013)
View(data_zhejiang2015)
View(data_zhejiang2013)
sum(data_zhejiang2013[,86]==1)
sum(data_zhejiang2013[,86]==0)
34*3
sum(data_zhejiang2015[,86]==0)
sum(data_zhejiang2015[,86]==1)
y = data_zhejiang2013[,192]
y
y = as.vector(unlist(y))
y
index = c(86,197,30,31,32)
tx = data_zhejiang2013[,index]
tx = cbind(1, tx)
x = tx[,2]
z = data_zhejiang2013[,c(5,8,10,11,188)]
z = cbind(1,z)
subset_zhejiang2013 = list(Y=y,X=tx,Z=x,U=z)
install.packages("D:/Fourth/wast/wast.zip", repos = NULL, type = "win.binary")
install.packages("D:/Fourth/wast/wast.zip", repos = NULL, type = "win.binary")
tx
which(data_zhejiang2013[,11]=1)
which(data_zhejiang2013[,11]==1)
sum(data_zhejiang2013[,11]==1)
length(y)
sum(data_zhejiang2013[,86]==1)
sum(data_zhejiang2013[,86]==0)
install.packages("D:/Third/Other/glm_fabs/crqfabs_0.0.1.tar.gz", repos = NULL, type = "source")
library(crqfabs)
library(crqfabs)
library("mnormt")
library("Matrix")
n1 = n2 = n3 = 100
p = 50
x1 = rmnorm(n1, mean = rep(0, p), varcov = outer(1:p, 1:p, FUN = function(x, y) 0.5^(abs(x-y))))
error1 = rnorm(n1, 0, 1)
beta1 = rep(0, p)
beta1[1:5] = rep(2,5)
c1 = -3
t1 = c1 + x1%*%beta1 + error1
C1 = rep(0, n1)
y1 = pmin(C1, t1)
x2 = rmnorm(n2, mean = rep(0, p), varcov = outer(1:p, 1:p, FUN = function(x, y) 0.5^(abs(x-y))))
error2 = rnorm(n2, 0, 1)
beta2 = rep(0, p)
beta2[1:5] = rep(3,5)
c2 = -3
t2 = c2 + x2%*%beta2 + error2
C2 = rep(0, n2)
y2 = pmin(C2, t2)
x3 = rmnorm(n3, mean = rep(0, p), varcov = outer(1:p, 1:p, FUN = function(x, y) 0.5^(abs(x-y))))
error3 = rnorm(n3, 0, 1)
beta3 = rep(0, p)
beta3[1:5] = rep(2.5,5)
c3 = -1
t3 = c3 + x3%*%beta3 + error3
C3 = rep(0, n3)
y3 = pmin(C3, t3)
data = list(Y = c(y1,y2,y3), X = rbind(cbind(1,x1),cbind(1,x2),cbind(1,x3)), C = c(C1,C2,C3), n = c(n1,n2,n3))
fit <- mcrqfabs(data, tau = 0.5, gamma = 1)
beta <- fit$opttheta
print(beta)
x = readRDS("D:/Fourth/quantile graph structure/code/result/1.rds")
x = readRDS("D:/Fourth/quantile graph structure/code/result/1-.rds")
x
x = readRDS("D:/Fourth/quantile graph structure/code/result/10-.rds")
x
x = readRDS("D:/Fourth/quantile graph structure/code/result/11-.rds")
x
x = readRDS("D:/Fourth/quantile graph structure/code/result/100-.rds")
x
x = readRDS("D:/Fourth/quantile graph structure/code/result/101-.rds")
x
x = readRDS("D:/Fourth/quantile graph structure/code/result/102-.rds")
x
x = readRDS("D:/Fourth/quantile graph structure/code/result/103-.rds")
x
x = readRDS("D:/Fourth/quantile graph structure/code/result/104-.rds")
x
x = readRDS("D:/Fourth/quantile graph structure/code/result/105-.rds")
x
x = readRDS("D:/Fourth/quantile graph structure/code/result/106-.rds")
x
x = readRDS("D:/Fourth/quantile graph structure/code/result/107-.rds")
x
x = readRDS("D:/Fourth/quantile graph structure/code/result/108-.rds")
x
x = readRDS("D:/Fourth/quantile graph structure/code/result/109-.rds")
x
x[1]-qnorm(0.975)*sqrt(x[2])
x[1]+qnorm(0.975)*sqrt(x[2])
2*qnorm(0.975)*sqrt(x[2])
y = c(1,2,3,4,5)
ifelse(y<=3 & y>=3,1,0)
z = c(5,4,3,2,1)
ifelse(y<=3 & z>=3,1,0)
x = readRDS("D:/Fourth/quantile graph structure/code/result")
x = readRDS("D:/Fourth/quantile graph structure/code/result/result.rds")
x[,3]
mean(x[,3])
density(x[,4])
x[,4]
density()
plot(density(x[,4]))
x[,5]
mean(x[,5])
x[,4]
lines(plot(density(rnorm(1000))))
x[,5]
x=readRDS("D:/Fourth/quantile graph structure/code/result")
x=readRDS("D:/Fourth/quantile graph structure/code/result/result.rds")
plot(density(x[,4]))
mean(x[,5])
x = readRDS("D:/Fourth/quantile graph structure/code/result/result_linear.rds")
x[,1]
mean(x[,1])
mean(x[,2])
mean(x[,3])
mean(x[,4])
plot(density(x[,5]))
x = readRDS("D:/Fourth/quantile graph structure/code/result/result1.rds")
mean(x[,1])
mean(x[,2])
mean(x[,3])
mean(x[,4])
lines(density(x[,5]))
lines(density(rnorm(1000)),col = "red")
lambda2 = seq(0,5,10)
lambda2
?seq
lambda2 = seq(0,5,length.out = 10)
lambda2
lambda2 = seq(0,3,length.out = 10)
lambda2
lambda2 = seq(0,5,length.out = 20)
lambda2
lambda2 = seq(0,1,length.out = 20)
lambda2
x = readRDS("D:/Fourth/quantile graph structure/code/result/result_proposed_K5.rds")
mean(x[,1])
mean(x[,2])
mean(x[,3])
mean(x[,4])
mean(x[,5])
plot(density(x[,5]))
x = readRDS("D:/Fourth/quantile graph structure/code/result/result_proposed.rds")
mean(x[,2])
mean(x[,3])
mean(x[,4])
lines(density(rnorm(1000)))
var(rnorm(1000))
x = readRDS("D:/Fourth/quantile graph structure/code/result/result_linear.rds")
mean(x[,2])
x = readRDS("D:/Fourth/quantile graph structure/code/result/result_proposed.rds")
x[,1]-3
(x[,1]-3)/sqrt(x[,2]/2)
y=(x[,1]-3)/sqrt(x[,2]/2)
plot(density(y))
lines(density(rnorm(1000)))
x = readRDS("D:/Fourth/quantile graph structure/code/result/result_linear.rds")
lines(density(x[,5]))
x = readRDS("D:/Fourth/quantile graph structure/code/result/result_proposed.rds")
cp = ifelse(x[,1]-qnorm(0.975)*sqrt(x[,2]/2)<=3 & x[,1]+qnorm(0.975)*sqrt(x[,2]/2)>=3, 1, 0)
cp
mean(cp)
mean(x[,2])
mean(x[,2]/2)
setwd("D:/First/quantile/integrative analysis/package/qfabs/qfabs")
devtools::check()
devtools::check()
devtools::build_manual()
devtools::check()
devtools::build_manual()
devtools::check()
